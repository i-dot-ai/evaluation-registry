# Generated by Django 4.2.7 on 2023-11-21 15:45
import json
import os
import uuid

import django.db.models.deletion
from django.db import migrations, models

with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "taxonomies.csv")) as f:
    rows = [json.loads(f"[{row}]") for row in f.readlines()]
    TAXONOMIES = rows[1:]


def populate_taxonomy_model(apps, schema_editor):
    Taxonomy = apps.get_model("evaluations", "Taxonomy")

    for code, display, parent in TAXONOMIES:
        Taxonomy.objects.get_or_create(
            code=code,
            display=display,
        )


def update_taxonomy_parents(apps, schema_editor):
    Taxonomy = apps.get_model("evaluations", "Taxonomy")

    for code, _, parent in TAXONOMIES:
        if parent:
            parent_instance = Taxonomy.objects.get(code=parent)

            Taxonomy.objects.filter(code=code).update(
                parent=parent_instance,
            )


with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "departments.csv")) as f:
    rows = [json.loads(f"[{row}]") for row in f.readlines()]
    DEPARTMENTS = rows[1:]


def populate_department_model(apps, schema_editor):
    Department = apps.get_model("evaluations", "Department")

    for code, display, _, _, _ in DEPARTMENTS:
        Department.objects.get_or_create(code=code, display=display)


with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "design_types.csv")) as f:
    rows = [json.loads(f"[{row}]") for row in f.readlines()]
    DESIGN_TYPES = rows[1:]


def populate_evaluation_design_type_model(apps, schema_editor):
    EvaluationDesignType = apps.get_model("evaluations", "EvaluationDesignType")

    for code, display, parent, collect_description in DESIGN_TYPES:
        EvaluationDesignType.objects.get_or_create(
            code=code,
            display=display,
            collect_description=(collect_description == "true"),
        )


def update_evaluation_design_type_parents(apps, schema_editor):
    EvaluationDesignType = apps.get_model("evaluations", "EvaluationDesignType")

    for code, display, parent, _ in DESIGN_TYPES:
        if parent:
            parent_instance = EvaluationDesignType.objects.get(code=parent)

            EvaluationDesignType.objects.filter(code=code).update(
                parent=parent_instance,
            )


class Migration(migrations.Migration):
    dependencies = [
        ("evaluations", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(populate_evaluation_design_type_model, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(update_evaluation_design_type_parents, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(populate_department_model, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(populate_taxonomy_model, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(update_taxonomy_parents, reverse_code=migrations.RunPython.noop),
    ]
